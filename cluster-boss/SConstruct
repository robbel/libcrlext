lib = Dir('lib')
build = Dir('build')
src = Dir('src')
inc = Dir('include')
bin = Dir('bin')

prefix = Dir(ARGUMENTS.get('prefix', '.'))
prefix_lib = prefix.Dir('lib')
prefix_inc = prefix.Dir('include')
prefix_bin = prefix.Dir('bin')


import os
cpath = os.environ.get('CPATH', "")
ld_library_path = os.environ.get('LD_LIBRARY_PATH', "")
cpp_paths = cpath.split(':')+[prefix_inc, inc]
lib_paths = ld_library_path.split(':')+[lib, prefix_lib]

if os.uname()[0] == "Darwin":
	lib_paths += ['/sw/lib']
	cpp_paths += ['/sw/include']

ccflags = ['-Wall', '-Werror', '-Wno-deprecated', '-std=c++11']
if 'debug' in COMMAND_LINE_TARGETS:
	ccflags += ['-g', '-O0']
else:
	ccflags += ['-DBOOST_DISABLE_ASSERTS', '-DNDEBUG', '-O2']

BuildDir(build, src, duplicate=0)

acrobot_sources = [build.File('acrobot_agent.cpp')]
cluster_sources = map(build.File, ['agent_cluster.cpp', 'dpmem.cpp', 'outcomes.cpp',
								   'cluster_gibbs.cpp', 'boss.cpp', 'cluster_boss_dia.cpp'])
headers = ['crl/dpmem.hpp', 'crl/outcomes.hpp', 'crl/cluster_gibbs.hpp', 'crl/boss.hpp']
	
env = Environment(tools = ["default", "tools"], toolpath = '.',
                  CXX='clang++-3.5',
                  CPPPATH=cpp_paths, CCFLAGS=ccflags, LIBPATH=lib_paths)

shared_lib_suffix = ".so"
if os.uname()[0] == "Darwin":
	shared_lib_suffix = ".dylib"
	env.Append(SHLINKFLAGS='-undefined dynamic_lookup')
	
config = Configure(env)
has_crl = config.CheckLibWithHeader('crl', 'crl/crl.hpp', 'cpp')
has_glue = config.CheckCXXHeader('rlglue/Agent_common.h')
has_gsl = config.CheckLibWithHeader('gsl', 'gsl/gsl_rng.h', 'c')
env = config.Finish()

lib_targets = []
bin_targets = []
	
if has_crl and has_glue:
	agent_cluster = env.Program(bin.Entry('agent_cluster'), cluster_sources,
	                       LIBS=['strxml', 'crl', 'rlgnmagent',
	                             'rlcrlagent', 'rlutils', 'rlgluenetdev',
	                             'gsl', 'gslcblas', 'm',
	                             'diastream', 'gzstream', 'z'])
	bin_targets += [agent_cluster]
else:
	print "Cannot build agent_cluster"
if has_crl and has_glue:
	agent_acrobot = env.Program(bin.Entry('agent_acrobot'), acrobot_sources,
	                       LIBS=['strxml', 'crl', 'rlgnmagent',
	                             'rlcrlagent', 'rlutils', 'rlgluenetdev'])
	bin_targets += [agent_acrobot]
else:
	print "Cannot build agent_acrobot"

if prefix != Dir('.'):
	for header in headers:
		env.Alias('install', env.InstallPerm(prefix_inc.Dir('crl'), inc.Entry(header), 0644))
	env.Alias('install', env.InstallPerm(prefix_lib, lib_targets, 0644))
	env.Alias('install', env.InstallPerm(prefix_bin, bin_targets, 0755))

for target in lib_targets+bin_targets:
	Default(target)
	env.Alias('debug', target)
	
dist_files = [File(x) for x in """
COPYING COPYING.LESSER SConstruct tools.py
""".split()]
dist_files += [inc.Entry(header) for header in headers]
dist_files += [src.Entry(s) for s in cluster_sources] 
dist_files += [src.Entry(s) for s in acrobot_sources] 

env.Alias('dist', env.DistTar('glue-agents.tar.gz', dist_files))
	
	
	