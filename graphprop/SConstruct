lib = Dir('lib')
build = Dir('build')
src = Dir('src')
testdir = Dir('test')
inc = Dir('include')
bin = Dir('bin')

prefix = Dir(ARGUMENTS.get('prefix', '.'))
prefix_lib = prefix.Dir('lib')
prefix_inc = prefix.Dir('include')
prefix_bin = prefix.Dir('bin')

import os
cpath = os.environ.get('CPATH', "")
ld_library_path = os.environ.get('LD_LIBRARY_PATH', "")
cpp_paths = cpath.split(':')+[prefix_inc, inc]
lib_paths = ld_library_path.split(':')+[lib, prefix_lib]

ccflags = ['-Wall', '-Werror', '-std=c++11']
if 'debug' in COMMAND_LINE_TARGETS:
	ccflags += ['-g', '-O0']
else:
	ccflags += ['-DBOOST_DISABLE_ASSERTS', '-DNDEBUG', '-O2']

BuildDir(build, src, duplicate=0)

# The following are put into a library (can be used without glue)
build_sources    = [build.File('env_graphprop.cpp')]
headers          = [inc.File('crl/env_graphprop.hpp')]
# glue wrappers
glue_graphprop_sources = [build.File('glue_graphprop.cpp')]
# test code
gtest_sources = [testdir.File(test) for test in ['test_graphprop.cpp']]

env = Environment(tools = ["default", "tools"], toolpath = '.',
                  CXX='clang++-3.5',
                  CPPPATH=cpp_paths, CCFLAGS=ccflags, LIBPATH=lib_paths)

shared_lib_suffix = ".so"
if os.uname()[0] == "Darwin":
	shared_lib_suffix = ".dylib"
	env.Append(SHLINKFLAGS='-undefined dynamic_lookup')

config = Configure(env)
#has_crl = config.CheckLibWithHeader('crl', 'crl/crl.hpp', 'cpp')
config.CheckCXXHeader('cpputil.hpp')
config.CheckCXXHeader('logger.hpp')
config.CheckCXXHeader('boost/shared_ptr.hpp')
has_crl = config.CheckCXXHeader('crl/crl.hpp')
has_glue = config.CheckCXXHeader('rlglue/Agent_common.h')
env = config.Finish()

lib_targets = []
bin_targets = []

# Library
if has_crl:
        libgraphprop = env.SharedLibrary(lib.File('libgraphprop'+shared_lib_suffix), build_sources,
                                   LIBS=['crl', 'strxml'])
        lib_targets += [libgraphprop]

	gtest = env.Program(bin.Entry('gtests'), gtest_sources, LIBS=['graphprop','crl', 'pthread','gtest','gtest_main'])
        bin_targets += [gtest]

else:
        print "Cannot build shared library"

# Networked executables
if has_crl and has_glue:
	glue_graphprop = env.Program(bin.Entry('glue_graphprop'), glue_graphprop_sources,
                                   LIBS=['graphprop', 'crl', 'rlgnmenv', 'rlcrlenv', 
                                         'rlutils', 'rlgluenetdev'])
	bin_targets += [glue_graphprop]
else:
	print "Cannot build glue_graphprop"

if prefix != Dir('.'):
	for header in headers:
		env.Alias('install', env.InstallPerm(prefix_inc.Dir('crl'), inc.Entry(header), 0644))
	env.Alias('install', env.InstallPerm(prefix_inc, inc.Entry('cpputil.hpp'), 0644))
	env.Alias('install', env.InstallPerm(prefix_inc, inc.Entry('logger.hpp'), 0644))
	env.Alias('install', env.InstallPerm(prefix_lib, lib_targets, 0644))
	env.Alias('install', env.InstallPerm(prefix_bin, bin_targets, 0755))

for target in lib_targets+bin_targets:
	Default(target)
	env.Alias('debug', target)

env.PrependENVPath('LD_LIBRARY_PATH', lib_paths)
gtest_alias = env.Alias('test', gtest, "cd "+Dir('#').abspath+"/test;"+gtest[0].abspath)
env.AlwaysBuild(gtest_alias)

dist_files = [File(x) for x in """
COPYING COPYING.LESSER SConstruct tools.py
cfgs/default.xml data/Gnp100.txt data/reg100k3.txt
""".split()]
dist_files += [inc.Entry(header) for header in headers]

dist_files += [src.Entry(build_source) for build_source in build_sources]
dist_files += [src.Entry(s) for s in glue_graphprop]

env.Alias('dist', env.DistTar('glue-graphprop.tar.gz', dist_files))
