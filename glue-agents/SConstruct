lib = Dir('lib')
build = Dir('build')
src = Dir('src')
inc = Dir('include')
bin = Dir('bin')

prefix = Dir(ARGUMENTS.get('prefix', '.'))
prefix_lib = prefix.Dir('lib')
prefix_inc = prefix.Dir('include')
prefix_bin = prefix.Dir('bin')


import os
cpath = os.environ.get('CPATH', "")
ld_library_path = os.environ.get('LD_LIBRARY_PATH', "")
cpp_paths = cpath.split(':')+[prefix_inc, inc]
lib_paths = ld_library_path.split(':')+[lib, prefix_lib]

if os.uname()[0] == "Darwin":
	lib_paths += ['/sw/lib']
	cpp_paths += ['/sw/include']

ccflags = ['-Wall', '-Werror', '-Wno-deprecated', '-std=c++11']
if 'debug' in COMMAND_LINE_TARGETS:
	ccflags += ['-g', '-O0']
else:
	ccflags += ['-DBOOST_DISABLE_ASSERTS', '-DNDEBUG', '-O2']

BuildDir(build, src, duplicate=0)

headers            = []
vi_rmax_sources    = [build.File('agent_vi_rmax.cpp')]
# The following are put into a library (can be used without glue)
#build_sources      = [build.File('agent_spudd.cpp')]
#headers            = [inc.File('crl/agent_spudd.hpp')]
# glue wrappers
glue_spudd_sources = [build.File('glue_spudd.cpp')]
glue_alp_sources = [build.File('glue_alp.cpp')]

	
env = Environment(tools = ["default", "tools"], toolpath = '.',
                  CXX='clang++-3.5',
                  CPPPATH=cpp_paths, CCFLAGS=ccflags, LIBPATH=lib_paths)

shared_lib_suffix = ".so"
if os.uname()[0] == "Darwin":
	shared_lib_suffix = ".dylib"
	env.Append(SHLINKFLAGS='-undefined dynamic_lookup')
	
config = Configure(env)
# alp agent uses libenv for planning
config.CheckLibWithHeader('env', 'crl/env_ffg.hpp', 'cpp')
has_crl = config.CheckCXXHeader('crl/crl.hpp')
has_glue = config.CheckCXXHeader('rlglue/Agent_common.h')
has_spudd = config.CheckLib('spudd', language='C++')
env = config.Finish()
env.PrependENVPath('LD_LIBRARY_PATH', lib_paths)

lib_targets = []
bin_targets = []
	
# Library
# if has_crl and has_spudd:
#         libagents = env.SharedLibrary(lib.File('libagents'+shared_lib_suffix), build_sources, LIBS=['crl'])
#         lib_targets += [libagents]
# else:
#         print "Cannot build shared library"

# Networked executables
if has_crl and has_glue:
	agent_vi_rmax = env.Program(bin.Entry('agent_vi_rmax'), vi_rmax_sources,
	                       LIBS=['strxml', 'crl', 'rlgnmagent',
	                             'rlcrlagent', 'rlutils', 'rlgluenetdev'])
	bin_targets += [agent_vi_rmax]

        glue_alp = env.Program(bin.Entry('glue_alp'), glue_alp_sources, LIBS=['env', 'crl', 'rlgnmagent', 'rlcrlagent', 'rlutils', 'rlgluenetdev'])
        bin_targets += [glue_alp]

	if has_spudd:
		glue_spudd = env.Program(bin.Entry('glue_spudd'), glue_spudd_sources, LIBS=['crl', 'rlgnmagent', 'rlcrlagent', 'rlutils', 'rlgluenetdev'])
		bin_targets += [glue_spudd]
                env.Append(CCFLAGS=['-DHAS_SPUDD'])
	else:
		print "Skipping spudd agent"
else:
	print "Cannot build networked agents"
	
if prefix != Dir('.'):
	for header in headers:
		env.Alias('install', env.InstallPerm(prefix_inc.Dir('crl'), inc.Entry(header), 0644))
	env.Alias('install', env.InstallPerm(prefix_lib, lib_targets, 0644))
	env.Alias('install', env.InstallPerm(prefix_bin, bin_targets, 0755))

for target in lib_targets+bin_targets:
	Default(target)
	env.Alias('debug', target)
	
dist_files = [File(x) for x in """
COPYING COPYING.LESSER SConstruct tools.py
""".split()]
dist_files += [inc.Entry(header) for header in headers]

#dist_files += [src.Entry(build_source) for build_source in build_sources]
dist_files += [src.Entry(s) for s in vi_rmax_sources]
dist_files += [src.Entry(s) for s in glue_spudd_sources]
dist_files += [src.Entry(s) for s in glue_alp_sources]

env.Alias('dist', env.DistTar('glue-agents.tar.gz', dist_files))
