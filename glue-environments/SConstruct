lib = Dir('lib')
build = Dir('build')
src = Dir('src')
inc = Dir('include')
bin = Dir('bin')

prefix = Dir(ARGUMENTS.get('prefix', '.'))
prefix_lib = prefix.Dir('lib')
prefix_inc = prefix.Dir('include')
prefix_bin = prefix.Dir('bin')


import os
cpath = os.environ.get('CPATH', "")
ld_library_path = os.environ.get('LD_LIBRARY_PATH', "")
cpp_paths = cpath.split(':')+[prefix_inc, inc]
lib_paths = ld_library_path.split(':')+[lib, prefix_lib]

ccflags = ['-Wall', '-Werror', '-std=c++11']
if 'debug' in COMMAND_LINE_TARGETS:
	ccflags += ['-g', '-O0']
else:
	ccflags += ['-DBOOST_DISABLE_ASSERTS', '-DNDEBUG', '-O2']

BuildDir(build, src, duplicate=0)

poupart_sources  = [build.File('env_poupart.cpp')]
littman_sources  = [build.File('env_littman.cpp')]
# The following are put into a library (can be used without glue)
build_sources    = [build.File('env_ffg.cpp'), build.File('env_sysadmin.cpp')]
headers          = [inc.File('crl/env_ffg.hpp'), inc.File('crl/env_sysadmin.hpp')]
# glue wrappers
glue_ffg_sources = [build.File('glue_ffg.cpp')]
glue_sys_sources = [build.File('glue_sysadmin.cpp')]
glue_rddl_sources = [build.File('glue_rddl.cpp')]


env = Environment(tools = ["default", "tools"], toolpath = '.',
                  CXX='clang++-3.5',
                  CPPPATH=cpp_paths, CCFLAGS=ccflags, LIBPATH=lib_paths)

shared_lib_suffix = ".so"
if os.uname()[0] == "Darwin":
	shared_lib_suffix = ".dylib"
	env.Append(SHLINKFLAGS='-undefined dynamic_lookup')
	
config = Configure(env)
#has_crl = config.CheckLibWithHeader('crl', 'crl/crl.hpp', 'cpp')
has_crl = config.CheckCXXHeader('crl/crl.hpp')
has_glue = config.CheckCXXHeader('rlglue/Agent_common.h')
env = config.Finish()
env.PrependENVPath('LD_LIBRARY_PATH', lib_paths)

lib_targets = []
bin_targets = []

# Library
if has_crl:
        libenv = env.SharedLibrary(lib.File('libenv'+shared_lib_suffix), build_sources,
                                   LIBS=['crl', 'strxml'])
        lib_targets += [libenv]
else:
        print "Cannot build shared library"

# Networked executables
if has_crl and has_glue:
	env_poupart = env.Program(bin.Entry('env_poupart'), poupart_sources,
	                       LIBS=['crl', 'rlgnmenv', 'strxml',
	                             'rlcrlenv', 'rlutils', 'rlgluenetdev'])
	bin_targets += [env_poupart]
else:
	print "Cannot build env_poupart"

if has_crl and has_glue:
	env_littman = env.Program(bin.Entry('env_littman'), littman_sources,
	                       LIBS=['crl', 'rlgnmenv', 'strxml',
	                             'rlcrlenv', 'rlutils', 'rlgluenetdev'])
	bin_targets += [env_littman]
else:
	print "Cannot build env_littman"

if has_crl and has_glue:
	glue_ffg = env.Program(bin.Entry('glue_ffg'), glue_ffg_sources,
                              LIBS=['env', 'crl', 'rlgnmenv',
                                    'rlcrlenv', 'rlutils', 'rlgluenetdev'])
	bin_targets += [glue_ffg]
else:
	print "Cannot build glue_ffg"

if has_crl and has_glue:
	glue_sysadmin = env.Program(bin.Entry('glue_sysadmin'), glue_sys_sources,
                                   LIBS=['env', 'crl', 'rlgnmenv', 'rlcrlenv', 
                                         'rlutils', 'rlgluenetdev'])
	bin_targets += [glue_sysadmin]
else:
	print "Cannot build glue_sysadmin"

if has_crl and has_glue:
	glue_rddl = env.Program(bin.Entry('glue_rddl'), glue_rddl_sources,
                                LIBS=['env', 'crl', 'rlgnmenv', 'rlcrlenv', 
                                      'rlutils', 'rlgluenetdev'])
	bin_targets += [glue_rddl]
else:
	print "Cannot build glue_rddl"

if prefix != Dir('.'):
	for header in headers:
		env.Alias('install', env.InstallPerm(prefix_inc.Dir('crl'), inc.Entry(header), 0644))
	env.Alias('install', env.InstallPerm(prefix_lib, lib_targets, 0644))
	env.Alias('install', env.InstallPerm(prefix_bin, bin_targets, 0755))

for target in lib_targets+bin_targets:
	Default(target)
	env.Alias('debug', target)
	
dist_files = [File(x) for x in """
COPYING COPYING.LESSER SConstruct tools.py
cfgs/chain1.xml cfgs/ffg1.xml cfgs/littman1.xml cfgs/littman2.xml
""".split()]
dist_files += [inc.Entry(header) for header in headers]

dist_files += [src.Entry(build_source) for build_source in build_sources]
dist_files += [src.Entry(s) for s in env_poupart]
dist_files += [src.Entry(s) for s in env_littman]
dist_files += [src.Entry(s) for s in glue_ffg]
dist_files += [src.Entry(s) for s in glue_sysadmin]
dist_files += [src.Entry(s) for s in glue_rddl]

env.Alias('dist', env.DistTar('glue-environments.tar.gz', dist_files))
