lib = Dir('lib')
build = Dir('build')
src = Dir('src')
inc = Dir('include')
bin = Dir('bin')

prefix = Dir(ARGUMENTS.get('prefix', '.'))
prefix_lib = prefix.Dir('lib')
prefix_inc = prefix.Dir('include')
prefix_bin = prefix.Dir('bin')

import os
cpath = os.environ.get('CPATH', "")
ld_library_path = os.environ.get('LD_LIBRARY_PATH', "")
cpp_paths = [cp for cp in cpath.split(':')]+[prefix_inc, inc]
lib_paths = [lp for lp in ld_library_path.split(':')]+[lib, prefix_lib]

ccflags = ['-Wall', '-Werror', '-ansi']

if 'debug' in COMMAND_LINE_TARGETS:
	ccflags += ['-g']
else:
	ccflags += ['-DBOOST_DISABLE_ASSERTS']

BuildDir(build, src, duplicate=0)

sources = """
crl.cpp          fdomain.cpp  vi.cpp		rmax.cpp
environment.cpp  mdomain.cpp  sparse_sampling.cpp  uct.cpp
prioritized_sweeping.cpp	  factor_learner.cpp
""".split()
headers = """
crl/crl.hpp          crl/fdomain.hpp  crl/uct.hpp		crl/rmax.hpp
crl/environment.hpp  crl/mdomain.hpp  crl/sparse_sampling.hpp  crl/vi.hpp
crl/prioritized_sweeping.hpp          crl/common.hpp	crl/util.hpp
crl/types.hpp		 crl/factor_learner.hpp
""".split()

build_sources = [build.File(source) for source in sources]
test_sources = [build.File('test.cpp')]

env = Environment(CPPPATH=cpp_paths, CCFLAGS=ccflags, LIBPATH=lib_paths)

config = Configure(env)
config.CheckCXXHeader('cpputil.hpp')
config.CheckCXXHeader('boost/shared_ptr.hpp')
env = config.Finish()

lib_targets = []
bin_targets = []

libcrl = env.SharedLibrary(lib.File('libcrl.so'), build_sources)
lib_targets += [libcrl]

test = env.Program(bin.Entry('test'), test_sources, LIBS=['crl'])
bin_targets += [test]

if prefix != Dir('.'):
	for header in headers:
		env.Alias('install', Install(prefix_inc.Dir('crl'), inc.Entry(header)))
	for lib_target in lib_targets:
		env.Alias('install', Install(prefix_lib, lib_target))
	for bin_target in bin_targets:
		env.Alias('install', Install(prefix_bin, bin_target))

for target in lib_targets+bin_targets:
	Default(target)
	env.Alias('debug', target)
