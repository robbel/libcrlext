lib = Dir('lib')
build = Dir('build')
src = Dir('src')
testdir = Dir('test')
inc = Dir('include')
bin = Dir('bin')

prefix = Dir(ARGUMENTS.get('prefix', '.'))
prefix_lib = prefix.Dir('lib')
prefix_inc = prefix.Dir('include')
prefix_bin = prefix.Dir('bin')

import os
cpath = os.environ.get('CPATH', "")
ld_library_path = os.environ.get('LD_LIBRARY_PATH', "")
cpp_paths = [cp for cp in cpath.split(':')]+[inc, prefix_inc]
lib_paths = [lp for lp in ld_library_path.split(':')]+[lib, prefix_lib]

ccflags = ['-Wall', '-Werror', '-Wno-deprecated', '-Wno-c++1y-extensions', '-std=c++11']

if 'debug' in COMMAND_LINE_TARGETS:
	ccflags += ['-g', '-O0']
else:
	ccflags += ['-DBOOST_DISABLE_ASSERTS', '-DNDEBUG', '-O2']

BuildDir(build, src, duplicate=0)

sources = """
crl.cpp				flat_tables.cpp			vi.cpp					rmax.cpp
environment.cpp		sparse_sampling.cpp  	uct.cpp					uctdata.cpp
ps.cpp	  			factor_learner.cpp		hash_tables.cpp			rtdp.cpp
ram.cpp              conversions.cpp           dbn.cpp          alp.cpp          alp_lpsolve.cpp           bigindex.cpp
""".split()
headers = """
crl/crl.hpp         crl/flat_tables.hpp  	crl/uct.hpp				crl/uctdata.hpp		
crl/rmax.hpp 		crl/environment.hpp		crl/sparse_sampling.hpp	crl/vi.hpp
crl/ps.hpp          crl/common.hpp			crl/util.hpp			crl/rtdp.hpp
crl/types.hpp	 	crl/factor_learner.hpp	crl/hash_tables.hpp		crl/ram.hpp
crl/tables.hpp      crl/conversions.hpp         crl/dbn.hpp          crl/alp.hpp          crl/alp_lpsolve.hpp          crl/function.hpp          crl/algorithm.hpp           crl/bigindex.hpp
""".split()

build_sources = [build.File(source) for source in sources]
test_sources = [build.File('test.cpp')]
gtest_sources = [testdir.File(test) for test in ['test_alp_basic.cpp','test_dbn.cpp','test_set.cpp']]
#gtest_sources = Glob('test/*.cpp');

env = Environment(tools = ["default", "tools"], toolpath = '.',
                  CXX='clang++-3.5',
                  CPPPATH=cpp_paths, CCFLAGS=ccflags, LIBPATH=lib_paths)

shared_lib_suffix = ".so"
if os.uname()[0] == "Darwin":
	shared_lib_suffix = ".dylib"
	env.Append(SHLINKFLAGS='-undefined dynamic_lookup')
	
config = Configure(env)
config.CheckCXXHeader('cpputil.hpp')
config.CheckCXXHeader('logger.hpp')
config.CheckCXXHeader('boost/shared_ptr.hpp')
has_lpsolve = config.CheckCXXHeader('lpsolve/lp_lib.h')
has_gurobi = config.CheckLib('gurobi_c++', language='C++')
has_spudd = config.CheckLib('spudd', language='C++')
env = config.Finish()

lib_targets = []
bin_targets = []
libcrl_libs = ['dl', 'lpsolve55_pic', 'colamd']

if has_spudd:
	build_sources += [build.File('spudd.cpp')]
        gtest_sources += [testdir.File('test_spudd.cpp')]
	headers += ['crl/spudd.hpp']
	libcrl_libs += ['spudd']

if has_gurobi:
	build_sources += [build.File('alp_gurobi.cpp')]
        gtest_sources += [testdir.File('test_gurobi.cpp')]
	headers += ['crl/alp_gurobi.hpp']
	libcrl_libs += ['gurobi_c++', 'gurobi60']
        env.Append(CCFLAGS=['-DHAS_GUROBI'])

if has_lpsolve:
        libcrl = env.SharedLibrary(lib.File('libcrl'+shared_lib_suffix), 
				   build_sources, LIBS=libcrl_libs)
        lib_targets += [libcrl]

        test = env.Program(bin.Entry('test'), test_sources, LIBS=['crl'])
        bin_targets += [test]

	gtest = env.Program(bin.Entry('gtests'), gtest_sources, LIBS=['crl','pthread','gtest','gtest_main'])
        bin_targets += [gtest]

else:
        print "Cannot build libcrl: liblpsolve55 not found."

if prefix != Dir('.'):
	for header in headers:
		env.Alias('install', env.InstallPerm(prefix_inc.Dir('crl'), inc.Entry(header), 0644))
	env.Alias('install', env.InstallPerm(prefix_inc, inc.Entry('cpputil.hpp'), 0644))
	env.Alias('install', env.InstallPerm(prefix_inc, inc.Entry('logger.hpp'), 0644))
	env.Alias('install', env.InstallPerm(prefix_lib, lib_targets, 0644))
	env.Alias('install', env.InstallPerm(prefix_bin, bin_targets, 0755))

for target in lib_targets+bin_targets:
	Default(target)
	env.Alias('debug', target)

env.PrependENVPath('LD_LIBRARY_PATH', lib_paths)
gtest_alias = env.Alias('test', gtest, "cd "+Dir('#').abspath+"/test;"+gtest[0].abspath)
env.AlwaysBuild(gtest_alias)

dist_files = [File(x) for x in """
COPYING COPYING.LESSER SConstruct tools.py
""".split()]
dist_files += [inc.Entry(header) for header in headers]
dist_files += [src.Entry(build_source) for build_source in build_sources] 
dist_files += [src.Entry(test_source) for test_source in test_sources] 

env.Alias('dist', env.DistTar('libcrl.tar.gz', dist_files))
