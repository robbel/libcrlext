lib = Dir('lib')
build = Dir('build')
src = Dir('test')
inc = Dir('include')
bin = Dir('bin')

prefix = Dir(ARGUMENTS.get('prefix', '.'))
prefix_lib = prefix.Dir('lib')
prefix_inc = prefix.Dir('include')
prefix_bin = prefix.Dir('bin')

import os
cpath = os.environ.get('CPATH', "")
ld_library_path = os.environ.get('LD_LIBRARY_PATH', "")
cpp_paths = [cp for cp in cpath.split(':')]+[inc, prefix_inc]
lib_paths = [lp for lp in ld_library_path.split(':')]+[lib, prefix_lib]

ccflags = ['-Wall', '-Werror', '-Wno-deprecated', '-Wno-c++1y-extensions', '-std=c++11']
if 'debug' in COMMAND_LINE_TARGETS:
	ccflags += ['-g', '-O0']
else:
	ccflags += ['-DBOOST_DISABLE_ASSERTS', '-DNDEBUG', '-O2']

BuildDir(build, src, duplicate=0)

# Environment
example_sources = [build.File('example.cpp')]
alp_sources = [build.File('alp.cpp')]
approxalp_sources = [build.File('approxalp.cpp')]
dbn_sources = [build.File('dbn.cpp')]
graphprop_sources = [build.File('graphprop.cpp')]
counter_sources = [build.File('counter.cpp')]
spudd_sources = [build.File('spudd.cpp')]
headers = []

env = Environment(tools = ["default", "tools"], toolpath = '.',
                  CXX='clang++-3.5',
                  CPPPATH=cpp_paths, CCFLAGS=ccflags, LIBPATH=lib_paths)

shared_lib_suffix = ".so"
if os.uname()[0] == "Darwin":
	shared_lib_suffix = ".dylib"
	env.Append(SHLINKFLAGS='-undefined dynamic_lookup')

# Add dependency locations here as required
config = Configure(env)
config.CheckCXXHeader('cpputil.hpp')
config.CheckCXXHeader('boost/shared_ptr.hpp')
config.CheckLibWithHeader('crl', 'crl/crl.hpp', 'cpp')
config.CheckLibWithHeader('env', 'crl/env_ffg.hpp', 'cpp')
config.CheckLibWithHeader('graphprop', 'crl/env_graphprop.hpp', 'cpp')
config.CheckCXXHeader('rlglue/Agent_common.h')
has_spudd = config.CheckLib('spudd', language='C++')
has_libdai = config.CheckLib('dai', language='C++')
env = config.Finish()

lib_targets = []
bin_targets = []

# Test programs with their individual dependencies
example = env.Program(bin.Entry('example'), example_sources, LIBS=['crl','pthread','gtest','gtest_main'])
bin_targets += [example]
alp = env.Program(bin.Entry('alp'), alp_sources, LIBS=['env','crl','pthread','gtest','gtest_main'])
bin_targets += [alp]
dbn = env.Program(bin.Entry('dbn'), dbn_sources, LIBS=['env','crl','pthread','gtest','gtest_main'])
bin_targets += [dbn]
graphprop = env.Program(bin.Entry('graphprop'), graphprop_sources, LIBS=['graphprop','crl','pthread','gtest','gtest_main'])
bin_targets += [graphprop]
counter = env.Program(bin.Entry('counter'), counter_sources, LIBS=['crl','pthread','gtest','gtest_main'])
bin_targets += [counter]
if has_spudd:
        spudd = env.Program(bin.Entry('spudd'), spudd_sources, LIBS=['env','graphprop','crl','pthread','gtest','gtest_main'])
        bin_targets += [spudd]
if has_libdai:
        approxalp = env.Program(bin.Entry('approxalp'), approxalp_sources, LIBS=['env','crl','dai','gmpxx','gmp','pthread','gtest','gtest_main'])
bin_targets += [approxalp]

if prefix != Dir('.'):
	for header in headers:
		env.Alias('install', env.InstallPerm(prefix_inc.Dir('crl'), inc.Entry(header), 0644))
	env.Alias('install', env.InstallPerm(prefix_lib, lib_targets, 0644))
	env.Alias('install', env.InstallPerm(prefix_bin, bin_targets, 0755))

for target in lib_targets+bin_targets:
	Default(target)
	env.Alias('debug', target)

# Run all gtests as required
env.PrependENVPath('LD_LIBRARY_PATH', lib_paths)
gtest_alias = env.Alias('test', example, example[0].abspath)
gtest_alias = env.Alias('test', alp, alp[0].abspath)
gtest_alias = env.Alias('test', approxalp, approxalp[0].abspath)
gtest_alias = env.Alias('test', dbn, dbn[0].abspath)
gtest_alias = env.Alias('test', graphprop, graphprop[0].abspath)
gtest_alias = env.Alias('test', counter, counter[0].abspath)
if has_spudd:
        gtest_alias = env.Alias('test', spudd, spudd[0].abspath)
if has_libdai:
        gtest_alias = env.Alias('test', approxalp, approxalp[0].abspath)
env.AlwaysBuild(gtest_alias)

# TODO: add configuration files from ./cfgs as required
dist_files = [File(x) for x in """
COPYING COPYING.LESSER README SConstruct tools.py
data/default.xml data/Gnp100.txt
""".split()]
dist_files += [inc.Entry(header) for header in headers]

dist_files += [src.Entry(example_source) for example_source in example_sources] 
dist_files += [src.Entry(alp_source) for alp_source in alp_sources] 
dist_files += [src.Entry(approxalp_source) for approxalp_source in approxalp_sources] 
dist_files += [src.Entry(dbn_source) for dbn_source in dbn_sources] 
dist_files += [src.Entry(graphprop_source) for graphprop_source in graphprop_sources] 
dist_files += [src.Entry(counter_source) for counter_source in counter_sources] 
dist_files += [src.Entry(spudd_source) for spudd_source in spudd_sources] 

env.Alias('dist', env.DistTar('integration_testing.tar.gz', dist_files))
